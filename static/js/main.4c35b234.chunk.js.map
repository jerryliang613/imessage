{"version":3,"sources":["features/userSlice.js","components/Message.js","features/chatSlice.js","firebase.js","components/Imessage.js","img/imessage.png","components/Login.js","components/SidebarChat.js","components/Sidebar.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["userSlice","createSlice","name","initialState","reducers","login","state","action","payload","logout","actions","selectUser","user","Message","forwardRef","ref","data","message","timestamp","photo","email","useSelector","className","Avatar","src","toDate","toLocaleTimeString","chatSlice","chatId","chatName","setChat","selectChatId","chat","selectChatName","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Imessage","useState","input","setInput","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","onSubmit","e","preventDefault","trim","add","FieldValue","serverTimestamp","uid","displayName","alert","type","placeholder","value","onChange","target","IconButton","MicOutlined","Login","logo","alt","Button","onClick","signInWithPopup","catch","error","SidebarChat","id","dispatch","useDispatch","chatInfo","setChatInfo","Sidebar","chats","setChats","signOut","prompt","chatTime","Date","variant","App","onAuthStateChanged","authUser","photoURL","configureStore","reducer","userReducer","chatReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c35b234.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: null,\r\n  reducers: {\r\n    login: (state, action) => (\r\n      { ...action.payload }\r\n    ),\r\n    logout: state => null\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = state => state.user;\r\n\r\nexport default userSlice.reducer;\r\n","import { forwardRef } from 'react';\r\nimport { Avatar } from \"@material-ui/core\"\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from './../features/userSlice';\r\n\r\nconst Message = forwardRef(({ data }, ref) => {\r\n    const { message, timestamp, photo, email } = data;\r\n    const user = useSelector(selectUser);\r\n    return (\r\n        <div ref={ref} className={`message ${email === user.email ? 'message_sender' : ''}`}>\r\n            <Avatar className='message_photo' src={photo} />\r\n            <p>{message}</p>\r\n            <small>{timestamp && timestamp.toDate().toLocaleTimeString()}</small>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Message;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const chatSlice = createSlice({\r\n  name: 'chat',\r\n  initialState: {\r\n    chatId: null,\r\n    chatName: null\r\n  },\r\n  reducers: {\r\n    setChat: (state, action) => ({\r\n      ...action.payload\r\n    }),\r\n\r\n  },\r\n});\r\n\r\nexport const { setChat } = chatSlice.actions;\r\n\r\nexport const selectChatId = state => state.chat.chatId;\r\nexport const selectChatName = state => state.chat.chatName;\r\n\r\nexport default chatSlice.reducer;\r\n","// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nimport firebase from 'firebase';\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBbtEqwjJpm4AN_8UG9Zzt-8obwQsHlnM8\",\r\n    authDomain: \"imessage-9f410.firebaseapp.com\",\r\n    databaseURL: \"https://imessage-9f410-default-rtdb.firebaseio.com\",\r\n    projectId: \"imessage-9f410\",\r\n    storageBucket: \"imessage-9f410.appspot.com\",\r\n    messagingSenderId: \"689816575830\",\r\n    appId: \"1:689816575830:web:fa16a9027eeaea21d440f7\",\r\n    measurementId: \"G-DW3K33TTES\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;","import { IconButton } from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { MicOutlined } from \"@material-ui/icons\";\r\nimport Message from './Message';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectChatName, selectChatId } from \"../features/chatSlice\";\r\nimport db from '../firebase';\r\nimport firebase from 'firebase';\r\nimport { selectUser } from './../features/userSlice';\r\nimport FlipMove from 'react-flip-move';\r\n\r\n\r\nconst Imessage = () => {\r\n    const [input, setInput] = useState('');\r\n    const chatName = useSelector(selectChatName);\r\n    const chatId = useSelector(selectChatId);\r\n    const [messages, setMessages] = useState([]);\r\n    const user = useSelector(selectUser);\r\n\r\n    useEffect(() => {\r\n        if (chatId) {\r\n            db.collection('chats')\r\n                .doc(chatId)\r\n                .collection('messages')\r\n                .orderBy('timestamp', 'desc')\r\n                .onSnapshot(snapshot =>\r\n                    setMessages(\r\n                        snapshot.docs.map(doc => ({\r\n                            data: doc.data()\r\n                        }))\r\n                    )\r\n                );\r\n\r\n        }\r\n\r\n    }, [chatId])\r\n\r\n    const handleChange = e => {\r\n        e.preventDefault();\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (chatId) {\r\n            if (input.trim()) {\r\n\r\n                db.collection('chats')\r\n                    .doc(chatId)\r\n                    .collection('messages')\r\n                    .add({\r\n                        message: input,\r\n                        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                        uid: user.uid,\r\n                        photo: user.photo,\r\n                        email: user.email,\r\n                        displayName: user.displayName,\r\n                    });\r\n\r\n                setInput('');\r\n            }\r\n            else {\r\n                alert('Please say something')\r\n            }\r\n        } else {\r\n            alert('Please create a channel first');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat_header\">\r\n                <h4><span className='chat_name'>To: {chatName}</span></h4>\r\n            </div>\r\n            <div className=\"chat_messages\">\r\n                <FlipMove>\r\n                    {\r\n                        messages.map(({ data }) => <Message\r\n                            key={data.timestamp}\r\n                            data={data}\r\n                        />)\r\n                    }\r\n                </FlipMove>\r\n            </div>\r\n            <div className=\"chat_input\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type='text' placeholder='iMessage'\r\n                        value={input}\r\n                        onChange={handleChange} />\r\n                    <input type='submit' value='Send Message' />\r\n                </form>\r\n                <IconButton>\r\n                    <MicOutlined />\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Imessage;","export default __webpack_public_path__ + \"static/media/imessage.2ee5a3f6.png\";","import Button from '@material-ui/core/Button';\r\nimport { auth, provider } from '../firebase.js';\r\nimport logo from '../img/imessage.png';\r\n\r\nconst Login = () => {\r\n    const signIn = () => {\r\n        auth.signInWithPopup((provider)).catch(error => alert(error.message));\r\n    }\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login_logo\">\r\n                <img src={logo} alt=\"\" />\r\n                <h1>iMessage</h1>\r\n            </div>\r\n            <Button onClick={signIn}>Sign in</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import { Avatar } from \"@material-ui/core\"\r\nimport { useDispatch } from \"react-redux\";\r\nimport db from '../firebase';\r\nimport { setChat } from '../features/chatSlice';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst SidebarChat = ({ id, chatName }) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [chatInfo, setChatInfo] = useState([]);\r\n    useEffect(() => {\r\n        db.collection('chats')\r\n            .doc(id)\r\n            .collection('messages')\r\n            .orderBy('timestamp', 'desc')\r\n            .onSnapshot(snapshot =>\r\n                setChatInfo(\r\n                    snapshot.docs.map(doc => doc.data()\r\n                    )\r\n                ))\r\n\r\n    }, [id])\r\n\r\n    const handleChanelChange = () => {\r\n        dispatch(setChat({\r\n            chatId: id,\r\n            chatName\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div className='sidebarchat' onClick={handleChanelChange}>\r\n            <Avatar />\r\n            <div className=\"sidebarchat_info\" >\r\n                <h3>{chatName}</h3>\r\n                <p>{chatInfo[0]?.message}</p>\r\n                <small>{chatInfo[0]?.timestamp?.toDate().toLocaleTimeString()}</small>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SidebarChat;","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RateReviewOutlinedIcon from '@material-ui/icons/RateReviewOutlined';\r\nimport SidebarChat from \"./SidebarChat\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectUser, logout } from './../features/userSlice';\r\nimport { useEffect, useState } from \"react\";\r\nimport db, { auth } from '../firebase';\r\n\r\n\r\nconst Sidebar = () => {\r\n    const user = useSelector(selectUser);\r\n    const dispatch = useDispatch();\r\n    const [chats, setChats] = useState([]);\r\n\r\n    useEffect(() => {\r\n        db.collection('chats').onSnapshot(snapshot =>\r\n            setChats(snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                data: doc.data(),\r\n            })))\r\n        )\r\n    }, [])\r\n\r\n    const handleLogout = () => {\r\n        dispatch(logout());\r\n        auth.signOut();\r\n    }\r\n\r\n    const addChat = () => {\r\n        const chatName = prompt('Please enter a chat name')\r\n        if (chatName) {\r\n            db.collection('chats').add({\r\n                chatName: chatName,\r\n                chatTime: new Date().toLocaleTimeString(),\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar_header\">\r\n                <Avatar\r\n                    onClick={handleLogout}\r\n                    src={user.photo} className='sidebar_avatar' />\r\n                <div className=\"sidebar_input\">\r\n                    <SearchIcon />\r\n                    <input type=\"text\" placeholder='search' />\r\n                </div>\r\n                <IconButton\r\n                    onClick={addChat}\r\n                    variant='outlined' className='sidebar_inputbutton' >\r\n                    <RateReviewOutlinedIcon\r\n\r\n                    />\r\n                </IconButton>\r\n            </div>\r\n            <div className=\"sidebar_chat\">\r\n                {\r\n                    chats.map(({ id, data: { chatName } }) =>\r\n                        <SidebarChat\r\n                            key={id}\r\n                            id={id}\r\n                            chatName={chatName}\r\n                        />\r\n                    )\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './App.css';\r\nimport Imessage from './components/Imessage';\r\nimport Login from './components/Login';\r\nimport Sidebar from './components/Sidebar';\r\nimport { selectUser, login, logout } from './features/userSlice';\r\nimport { auth } from './firebase';\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged(authUser => {\r\n      if (authUser) {\r\n        const user = {\r\n          uid: authUser.uid,\r\n          photo: authUser.photoURL,\r\n          email: authUser.email,\r\n          displayName: authUser.displayName\r\n        }\r\n        dispatch(login(user));\r\n      }\r\n      else {\r\n        dispatch(logout());\r\n      }\r\n    });\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {user ? <>\r\n        <Sidebar />\r\n        <Imessage />\r\n      </>\r\n        : <Login />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport chatReducer from '../features/chatSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    chat: chatReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/main.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}